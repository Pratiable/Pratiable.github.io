{"componentChunkName":"component---src-templates-blog-template-js","path":"/boj-js-output-problem/","result":{"data":{"cur":{"id":"03861738-706d-54a6-a59b-60e3809b76c4","html":"<h1 id=\"js로-알고리즘-풀다가-시간초과-나올-때consolelog-관련\" style=\"position:relative;\"><a href=\"#js%EB%A1%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%92%80%EB%8B%A4%EA%B0%80-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC-%EB%82%98%EC%98%AC-%EB%95%8Cconsolelog-%EA%B4%80%EB%A0%A8\" aria-label=\"js로 알고리즘 풀다가 시간초과 나올 때consolelog 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>js로 알고리즘 풀다가 시간초과 나올 때(console.log 관련)</h1>\n<h2 id=\"왜-시간초과가-나오니\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC%EA%B0%80-%EB%82%98%EC%98%A4%EB%8B%88\" aria-label=\"왜 시간초과가 나오니 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 시간초과가 나오니…</h2>\n<p>백준에서 알고리즘 문제를 푸는데 시간초과로 정답 통과가 안되는 상황이 발생했다.\n로직적인 문제인건지 계속 생각해보며 코드 수정을 했는데 시간이 좀 오래 걸릴만한 테스트 케이스로 테스트 해보니\n뭔가 터미널에 로그가 늦게찍히는 느낌이 들었다.</p>\n<p>전에 python으로 백준에서 문제를 풀 때 <code class=\"language-text\">input</code>을 사용할 때 너무 느려서 <code class=\"language-text\">sys.stdin.readline</code>\n을 사용해서 해결한 적이 있었기에 설마 js에서도 비슷한 문제인건지 찾아봤는데 역시 <code class=\"language-text\">console.log</code>가 너무 느려서 시간초과가 일어난거였다!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PATH</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">'linux'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'/dev/stdin'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'testcase.txt'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> via</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> via<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> via<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 하고 <code class=\"language-text\">N</code>값을 4, 5정도만 해보고 괜찮은 것 같아서 제출했었는데 20으로 테스트하게 되면 <code class=\"language-text\">console.log</code>가 백만번 이상 호출되었기 때문에 시간초과가 일어나게 된 것이었다.</p>\n<hr>\n<h2 id=\"해결방법-1\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-1\" aria-label=\"해결방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법 #1</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PATH</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">'linux'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'/dev/stdin'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'testcase.txt'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> via</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> via<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> via<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">console.log</code>때문에 속도가 느려졌으니 <code class=\"language-text\">console.log</code>로 한 번에 모두 출력하기 위해서 array를 따로 만들고 거기에 출력들을 전부다 집어넣어서 join메서드를 활용해서 출력했다!</p>\n<p>이렇게 해서 제출해보니 일단 통과는 되었는데 array에 결과값을 하나씩 다 집어넣고 나중에 합치다보니 메모리가 너무 비효율적으로 사용되게 되어서 다른 방법을 찾아보게 됐다🥲</p>\n<hr>\n<h2 id=\"해결방법-2\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-2\" aria-label=\"해결방법 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법 #2</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PATH</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">'linux'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'/dev/stdin'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'testcase.txt'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PATH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> via</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> via<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> via<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> answer\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token constant\">N</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이번엔 array를 따로 사용하지 않고 아예 string에 계속 더해서 return시켰다.</p>\n<p>array에 담고 꺼내는 동작이 없어지니 메모리 사용량이 151600kb에서 74848kb로 반 정도 줄어들고 처리 속도도 array에 담을 때 보다 빨라지게 됐다!</p>\n<hr>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<p>확실히 js는 아직 익숙하지 않은데다 알고리즘을 js로 풀게된 건 일주일도 안됐기 때문에 python으로 풀던 시절이 그리울 때가 있다…😢</p>\n<p>일단 js로 백준에서 알고리즘 문제를 풀려면 input부터 이게 뭐야?라는 말이 나오기 때문에 시작하는 것 자체가 살짝 힘든 부분이 있다.. </p>\n<p>그래도 한 번 어떻게 하는지 정립을 해놓고 하니까 점점 적응도 되고 js 자체도 알고리즘을 풀어가면서 여러 방식을 사용해서 문제를 해결하기 때문에 새로운 메서드를 하나씩 알아가는게 너무 재밌는 것 같다!</p>\n<p>앞으로도 알고리즘을 지속적으로 열심히 풀어봐야겠다…ㅋㅋㅋㅋ 개인적인 생각이지만 언어에 익숙해지는데는 알고리즘 문제 푸는것이 효과가 좋은듯!😊</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%99%9C-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC%EA%B0%80-%EB%82%98%EC%98%A4%EB%8B%88\">왜 시간초과가 나오니…</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-1\">해결방법 #1</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-2\">해결방법 #2</a></li>\n<li><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\">느낀점</a></li>\n</ul>\n</div>","excerpt":"js로 알고리즘 풀다가 시간초과 나올 때(console.log 관련) 왜 시간초과가 나오니… 백준에서 알고리즘 문제를 푸는데 시간초과로 정답 통과가 안되는 상황이 발생했다.\n로직적인 문제인건지 계속 생각해보며 코드 수정을 했는데 시간이 좀 오래 걸릴만한 테스트 케이스로 테스트 해보니\n뭔가 터미널에 로그가 늦게찍히는 느낌이 들었다. 전에 python으로 백준에서 문제를 풀 때 을 사용할 때 너무 느려서 \n을 사용해서 해결한 적이 있었기에 설마 js에서도 비슷한 문제인건지 찾아봤는데 역시 가 너무 느려서 시간초과가 일어난거였다! 이렇게 하고 값을 4, 5정도만 해보고 괜찮은 것 같아서 제출했었는데 20으로 테스트하게 되면 가 백만번 이상 호출되었기 때문에 시간초과가 일어나게 된 것이었다. 해결방법 #1 때문에 속도가 느려졌으니 로 한 번에 모두 출력하기 위해서 array를 따로 만들고 거기에 출력들을 전부다 집어넣어서 join메서드를 활용해서 출력했다! 이렇게 해서 제출해보니 일단 통…","frontmatter":{"date":"September 07, 2021","title":"js로 알고리즘 풀다가 시간초과 나올 때","categories":"알고리즘","author":"이준영","emoji":"🐌"},"fields":{"slug":"/boj-js-output-problem/"}},"next":{"id":"84a84519-82e2-5a5d-ba5e-49240d7ca3a0","html":"<blockquote>\n<p>⛔️ 공부하며 정리한 내용으로 내용상 정확하지 않은 부분이 있을 수 있으니 참고 부탁드립니다!</p>\n<p>수정이 필요한 부분은 Comment 남겨주시면 감사하겠습니다!</p>\n</blockquote>\n<h1 id=\"이-글을-쓰는-목적\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EA%B8%80%EC%9D%84-%EC%93%B0%EB%8A%94-%EB%AA%A9%EC%A0%81\" aria-label=\"이 글을 쓰는 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 글을 쓰는 목적🤔</h1>\n<p><code class=\"language-text\">Nest.js</code>를 공부하다 보니 <code class=\"language-text\">Django</code>를 공부할 때와는 달리 처음보는 개념들이 너무 많았는데 그 중에서 Dependency Injection은 가장 자주나오고 앞으로 무슨 언어 &#x26; 프레임워크로 개발을 진행하던지 상관없이 알아야 할 필수 개념, OOP을 위한 부분 같아서 글로써 정리해보고자 한다!</p>\n<hr>\n<h1 id=\"dependency-injection의존성-주입이란\" style=\"position:relative;\"><a href=\"#dependency-injection%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4%EB%9E%80\" aria-label=\"dependency injection의존성 주입이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection(의존성 주입)이란?</h1>\n<p>간단하게 설명하자면 class간의 의존성을 class 외부에서 주입하는것을 말하는데 아래에 하나씩 적어보며 이해해 보기로 하자!</p>\n<hr>\n<h2 id=\"의존성\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"의존성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성?</h2>\n<p>일단 의존성이란 객체들이 서로 의존 관계를 가진 성질이라고 간단하게 정리 할 수 있다!</p>\n<p>객체가 두 개가 존재할 때 한 객체가 존재하려면 다른 하나를 필요로 할 때 의존성이 생긴다고 할 수 있는데, 일단\n이해가 잘 안되니 아래 코드로 일단 살펴보도록 하겠다!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dagger</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'attacked with a Dagger!'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rogue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> weapon<span class=\"token operator\">:</span> Dagger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 Rogue class는 Dagger class를 내부에서 새로 생성하게 되면서 의존관계가 생기게 되며, weapon을 변경하고 싶어도 다른 weapon으로 변경할 수 없게 되는 문제가 있다!</p>\n<p>이런 경우에 <code class=\"language-text\">Tight Coupling(강한 결합)</code>이 일어나게 되는데 여기서 Dagger class를 변경하게 된다면 당연하게도 Rouge class까지 영향을 미치게 된다.</p>\n<p>결국 하나의 객체가 수정되었을 때 그 객체를 의존하고 있는 다른 객체까지 수정되어야 하는 문제가 발생하고 Unit Test 작성도 어려워진다.</p>\n<hr>\n<h2 id=\"주입은\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9E%85%EC%9D%80\" aria-label=\"주입은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주입은?</h2>\n<p>위에 코드에서는 객체 내부에서 또 다른 객체를 생성해서 사용했는데 외부에서 객체를 생성해서 다른 객체에게 넣어주는 것을 뜻한다.</p>\n<p>주입하는 방법은</p>\n<ol>\n<li>Field Injection</li>\n<li>Function(Setter) Injection</li>\n<li>Constructor Injection</li>\n</ol>\n<p>세 가지가 있는데 위 세 가지 방법중에 Constructor를 통해서 주입하는 방법으로 진행해 보도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dagger</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'attacked with a Dagger!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bow</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'attacked with a Bow!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rogue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> weapon<span class=\"token operator\">:</span> Weapon<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>weapon<span class=\"token operator\">:</span> Weapon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> weapon<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rangedRogue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rogue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bow</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> meleeRogue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rogue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dagger</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rangedRogue<span class=\"token punctuation\">.</span><span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>meleeRogue<span class=\"token punctuation\">.</span><span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// \"attacked with a Bow!\"</span>\n<span class=\"token comment\">// \"attacked with a Dagger!\" </span></code></pre></div>\n<p>위 코드를 보면 Rogue객체는 의존하는 type만 알고있고, 매개변수로 정해진 type(예제에서는 Weapon)을 전달하게 되면 어느것이 들어오던지 문제 없이 객체를 생성할 수 있게 된다. 이렇게 코드를 작성하면 의존성이 해소될 수 있다.</p>\n<p>하지만 여기서 의존성이 해소되었다고 끝이 아니라 알아야될 한 가지의 개념이 더 존재한다.</p>\n<hr>\n<h2 id=\"inversion-of-control제어의-역전\" style=\"position:relative;\"><a href=\"#inversion-of-control%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\" aria-label=\"inversion of control제어의 역전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inversion of Control(제어의 역전)</h2>\n<p>IoC는 객체의 생성이나 Lifecycle의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미하는 Design pattern이다.</p>\n<p>이것을 구현하기 위해서는 IoC Container가 필요한데 이 역할을 Framework가 해줄 수 있다.</p>\n<p>결국 Framework에서 클라이언트 코드에 객체를 주입해서 개발자가 신경써야 할 코드를 줄이는 방법이다.</p>\n<blockquote>\n<p>IoC Container는 Factory Pattern과 혼동해서 사용할 수 있다고 한다.</p>\n<p>기본적으로 Factory는 단순히 객체를 생성하게 되지만 IoC Container를 사용 시 IoC의 개념이 적용되어야 한다.</p>\n<p>IoC Container를 사용한다고 해서 그냥 IoC가 일어나는 것이 아니라는 뜻.</p>\n</blockquote>\n<p>Nest.js의 예제를 하나 확인해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountsService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">InjectRepository</span></span><span class=\"token punctuation\">(</span>Account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> accountRepository<span class=\"token operator\">:</span> Repository<span class=\"token operator\">&lt;</span>Account<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">findAccount</span><span class=\"token punctuation\">(</span>user_account<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Account <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>user_account<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnauthorizedException</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INVALID_ACCOUNT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 AccountsService의 생성자에 accountRepository 부분을 보게되면 type만 지정해 줬는데도 아래 findAccount부분에서 accountRepository의 findOne이라는 method를 사용하고 있다.</p>\n<p>이것이 가능한 이유는 Nest.js에서 accountRepository의 type을 보고 Repository 타입을 알아서 할당해줬기 때문이다.</p>\n<p>그래서 개발자는 위 객체의 Lifecycle을 신경쓰지 않아도 편하게 사용하면 되는데 이렇게 생성된 객체는 Nest.js에서 자동으로 관리를 해주기 때문이다.</p>\n<hr>\n<h2 id=\"dependency-injection의-장단점\" style=\"position:relative;\"><a href=\"#dependency-injection%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"dependency injection의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection의 장단점</h2>\n<p>지금까지 Dependency Injection에 대해서 여러 예제와 함께 살펴 봤는데 Dependency Injection의 장단점에 대해 짧게 정리해보려고 한다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>가독성과 코드의 재사용성을 높여줌</li>\n<li>종속성이 감소하기 때문에 변경에 민감하지 않게 됨</li>\n<li>객체간의 결합도를 낮춰주기 때문에 유연한 코드작성이 가능해짐</li>\n<li>객체들이 분리되어 있어서 Test Case작성 시 효율적임</li>\n<li>Lifecycle별로 Container를 관리해서 리소스의 낭비를 줄일 수 있음</li>\n</ol>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>DI를 위해서 따로 작업을 해주어야 하기 때문에 간단한 코드를 작성할 땐 번거로울 수 있음</li>\n<li>동작, 구성을 분리하기 때문에 코드 추적이 어려울 수 있음</li>\n</ol>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며🎉</h2>\n<p>DI를 처음 접할 땐 모르는 부분이 많았기 때문에 프로젝트를 진행하며 이게 어떻게 동작하는지 생각할 시간이 너무 없고 작동이 되는 코드만 작성하기에 급급했던 것 같은데\n그래도 이번 블로그 글을 정리하면서 DI에 대해 많이 배운 것 같다.</p>\n<p>Framework에서 DI를 해준다고 해서 너무 Framework에 의존하지 않고 어떻게 하면 내 코드에서부터 의존성을 줄여 나갈 수 있을까 고민해봐야겠다.</p>\n<p>하지만 문제는 이렇게 공부하고 나니 또 모르는 개념들이 쏟아져서 앞으로도 많은 학습이 필요할 것 같은데 그런 부분들도 추가로 블로그 글로 정리해야 할 듯 하다😂</p>\n<blockquote>\n<p>🛠 <em>부족한 부분들은 지속적으로 수정 예정!</em></p>\n</blockquote>\n<hr>\n<p>앞으로 공부해야 할 것들🤙🏻</p>\n<ul>\n<li>Singleton Pattern</li>\n<li>Factory Pattern</li>\n<li>etc…</li>\n</ul>\n<hr>\n<p><strong>References</strong></p>\n<p><a href=\"https://medium.com/lemonade-engineering/node-js%EB%A1%9C-%EC%84%A4%EB%AA%85%ED%95%98%EB%8A%94-di-b4a8acf9ce25\">출처1</a></p>\n<p><a href=\"https://medium.com/@jang.wangsu/di-dependency-injection-%EC%9D%B4%EB%9E%80-1b12fdefec4f\">출처2</a></p>\n<p><a href=\"https://develogs.tistory.com/19\">출처3</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1\">의존성?</a></li>\n<li><a href=\"#%EC%A3%BC%EC%9E%85%EC%9D%80\">주입은?</a></li>\n<li><a href=\"#inversion-of-control%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\">Inversion of Control(제어의 역전)</a></li>\n<li>\n<p><a href=\"#dependency-injection%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">Dependency Injection의 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며🎉</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 29, 2021","title":"Dependency Injection","categories":"디자인패턴","author":"이준영","emoji":"💉"},"fields":{"slug":"/dependency-injection/"}},"prev":{"id":"3e933c34-65fa-579a-9583-7952a371df45","html":"<h1 id=\"database란\" style=\"position:relative;\"><a href=\"#database%EB%9E%80\" aria-label=\"database란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Database란?</h1>\n<ul>\n<li>일반적으로 컴퓨터 시스템에 저장된 정보 또는 데이터의 집합</li>\n<li>DBMS(<code class=\"language-text\">데이터베이스 관리 시스템</code>)으로 제어</li>\n<li>데이터와 DBMS는 연관된 어플리케이션들과 함께 <code class=\"language-text\">데이터베이스 시스템</code>으로 일컬어지며 더 짧게는 데이터베이스라고 통칭되기도 함</li>\n<li>어플리케이션에서는 데이터가 메모리상에 존재하고 <strong>메모리에 존재하는 데이터는 보존이 되지 않기 때문</strong>에 애플리케이션이 종료되면 메모리에 있던 데이터들은 다시 읽어들일 수 없어서 데이터를\n<strong>오랜기간 저장 및 보존하기 위해</strong>서 데이터베이스라고 통칭</li>\n<li>\n<h2 id=\"code-classlanguage-textrdbmscode관계형-데이터베이스와-code-classlanguage-textnosqlcode로-명칭되는-비관계형-데이터베이스가-있음\" style=\"position:relative;\"><a href=\"#code-classlanguage-textrdbmscode%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%99%80-code-classlanguage-textnosqlcode%EB%A1%9C-%EB%AA%85%EC%B9%AD%EB%90%98%EB%8A%94-%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EA%B0%80-%EC%9E%88%EC%9D%8C\" aria-label=\"code classlanguage textrdbmscode관계형 데이터베이스와 code classlanguage textnosqlcode로 명칭되는 비관계형 데이터베이스가 있음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">RDBMS</code>(관계형 데이터베이스)와 <code class=\"language-text\">NoSQL</code>로 명칭되는 비관계형 데이터베이스가 있음</h2>\n</li>\n</ul>\n<h2 id=\"database를-사용하는-이유\" style=\"position:relative;\"><a href=\"#database%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"database를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Database를 사용하는 이유?</h2>\n<ol>\n<li>\n<p>데이터를 오랜기간 저장 및 보존</p>\n<blockquote>\n<p>어플리케이션에서는 데이터가 메모리상에 존재하고 <strong>메모리에 존재하는 데이터는 보존이 되지 않기 때문</strong>에 종료되면 메모리에 있던 데이터들은 다시 읽어들일 수 없어서 데이터를 <strong>오랜기간 저장 및 보존하기 위해</strong></p>\n</blockquote>\n</li>\n<li>\n<p>데이터를 체계적으로 보존하고 관리하기 위해 사용</p>\n<blockquote>\n<p>내가 원하는 자료를 쉽게 읽어낼 수 있어야만 의미 있는 정보기 때문</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h2 id=\"rdbms-relational-database-management-system\" style=\"position:relative;\"><a href=\"#rdbms-relational-database-management-system\" aria-label=\"rdbms relational database management system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDBMS (Relational DataBase Management System)</h2>\n<ul>\n<li><code class=\"language-text\">관계형 데이터 모델</code>에 기초를 둔 데이터베이스 시스템을 말함 (MySQL, Postgres, Oracle DB등)</li>\n<li><code class=\"language-text\">관계형 데이터</code>란 데이터를 서로 상호 관련성을 가진 형태로 표현한 데이터</li>\n<li>\n<p>모든 데이터들은 2차원 테이블로 표현가능</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>Primary Key (id)</th>\n<th>name</th>\n<th>team</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Lewis Hamilton</td>\n<td>Mercedes</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Max Verstappen</td>\n<td>Redbull</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Charles Leclerc</td>\n<td>Ferrari</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Daniel Ricciardo</td>\n<td>Mclaren</td>\n</tr>\n<tr>\n<td>5</td>\n<td>George Russel</td>\n<td>Williams</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>각각의 테이블은 column과 row로 구성되어 있음</li>\n<li>column은 테이블의 각 항목(<code class=\"language-text\">id</code>, <code class=\"language-text\">name</code>, <code class=\"language-text\">team</code>)</li>\n<li>row는 각 항목들의 실제 값(<code class=\"language-text\">Lewis Hamilton</code>, <code class=\"language-text\">Daniel Ricciardo</code>, <code class=\"language-text\">Ferrari</code>)</li>\n<li>각 row는 자신만의 고유 키 (<code class=\"language-text\">Primary Key</code>)가 있고 고유 키를 통해서 해당 row를 찾거나 인용(<code class=\"language-text\">reference</code>)하게 됨</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"rdbms에서-테이블끼리의-연결-종류\" style=\"position:relative;\"><a href=\"#rdbms%EC%97%90%EC%84%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EB%81%BC%EB%A6%AC%EC%9D%98-%EC%97%B0%EA%B2%B0-%EC%A2%85%EB%A5%98\" aria-label=\"rdbms에서 테이블끼리의 연결 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDBMS에서 테이블끼리의 연결 종류</h3>\n<h4 id=\"1-one-to-one\" style=\"position:relative;\"><a href=\"#1-one-to-one\" aria-label=\"1 one to one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) One to One</h4>\n<ul>\n<li>테이블 A의 row와 테이블 B의 row가 정확히 일대일 매칭이 되는 관계</li>\n<li>결혼으로 생각하면 남-녀 한 명씩만 결혼을 할 수 있는 것처럼 일대일 매칭</li>\n<li>One to One 관계에서는 pk, fk가 어느쪽에 있던 문제는 되지 않음</li>\n</ul>\n<h4 id=\"2-one-to-many\" style=\"position:relative;\"><a href=\"#2-one-to-many\" aria-label=\"2 one to many permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) One to Many</h4>\n<p>테이블 A의 row가 테이블 B의 여러 row와 연결이 되는 관계\n부모-자식간의 관계로 생각하면 쉽다\n부모 입장에서는 여러 명의 자녀를 가질 수 있으나 자녀 입장에서는 부모가 하나</p>\n<h4 id=\"3-many-to-many\" style=\"position:relative;\"><a href=\"#3-many-to-many\" aria-label=\"3 many to many permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Many to Many</h4>\n<p>테이블 A의 여러 row가 테이블 B의 여러 row와 연결이 되는 관계\n서로가 서로를 1:N 관계로 보고 있는 것\n학원과 학생의 관계를 생각해 보면 한 학원에는 여러명의 수강생이 있고 수강생도 여러 학원을 수강할 수 있으므로 N:M관계를 가진다고 할 수 있음</p>\n<hr>\n<h3 id=\"테이블과-테이블을-연결하는-방법\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B3%BC-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"테이블과 테이블을 연결하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블과 테이블을 연결하는 방법</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Foreign key</code>(외부키)라는 개념을 사용하여 주로 연결함</p>\n<blockquote>\n<p>다른 테이블의 <code class=\"language-text\">Primary key</code>를 참조</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"테이블들을-연결하는-이유\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94%EB%93%A4%EC%9D%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"테이블들을 연결하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블들을 연결하는 이유?</h3>\n<p>정보들을 왜 여러 테이블에 나누어서 저장할까? 그냥 하나의 테이블에 전부다 저장하면 안되는 것일까?</p>\n<blockquote>\n<ul>\n<li>하나의 테이블에 모든 정보를 다 넣으면 동일한 정보들이 불필요하게 중복되어 저장되어 더 많은 디스크를 사용 및 잘못된 데이터가 저장 될 가능성이 높아짐</li>\n<li>서로 같은 데이터이지만 부분적으로 내용이 다른 데이터가 생기는 문제가 없어짐</li>\n<li>이것을 <code class=\"language-text\">normalization(정규화)</code>라고 함</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"acidatomicity-consistency-isolation-durability\" style=\"position:relative;\"><a href=\"#acidatomicity-consistency-isolation-durability\" aria-label=\"acidatomicity consistency isolation durability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ACID(Atomicity, Consistency, Isolation, Durability)</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Atomicity(원자성)</code>은 트랜잭션과 관련된 작업들이 부분적으로 실행되다가 중단되지 않는 것을 보장하는 능력</p>\n<blockquote>\n<p>Ex) 자금 이체시 출금만 성공하고 상대 계좌로 입금되는 작업이 실패해서는 안되는 것</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">Consistency(일관성)</code>은 트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 유지하는 것을 의미</p>\n<blockquote>\n<p>Ex) 위 송금 예제에서 금액의 데이터 타입이 <code class=\"language-text\">int</code>인데 갑자기 <code class=\"language-text\">str</code>이 되지 않는 것</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">Isolation(고립성)</code>은 트랜잭션을 수행 시 다른 트랜잭션의 연산 작업이 끼어들지 못하도록 보장하는 것을 의미</p>\n<blockquote>\n<p>트랜잭션끼리는 서로를 간섭할 수 없음</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">Durability(지속성)</code>은 성공적으로 수행 된 트랜잭션은 영원히 반영되어야 함을 의미</p>\n<blockquote>\n<p>commit이후에 컴퓨터가 꺼지면 데이터는 이미 저장되었으므로 보존되지만 commit전에 컴퓨터가 꺼지게 된다면 데이터는 <code class=\"language-text\">Atomicity</code>원칙을 따라 트랜잭션을 수행하기 전으로 돌아감</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"commit--rollback\" style=\"position:relative;\"><a href=\"#commit--rollback\" aria-label=\"commit  rollback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commit &#x26; Rollback</h3>\n<h4 id=\"commit\" style=\"position:relative;\"><a href=\"#commit\" aria-label=\"commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commit</h4>\n<p>변경된 데이터를 테이블에 영구적으로 반영하는 것</p>\n<ul>\n<li>commit전에는 메모리 buffer에만 영향을 받았기 때문에 데이터의 변경 이전 상태로 복구 가능</li>\n<li>commit후에는 변경사항이 데이터베이스에 반영되고 이전 데이터는 영원히 잃어버리게 됨</li>\n<li>commit이전에 다른 사용자는 현재 사용자가 수행한 명령의 결과를 볼 수 없고 commit이후에 모든 사용자가 결과를 확인 가능</li>\n<li>commit이전에 변경된 행은 locking이 설정되어 다른 사용자가 변경 불가</li>\n</ul>\n<h4 id=\"rollback\" style=\"position:relative;\"><a href=\"#rollback\" aria-label=\"rollback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rollback</h4>\n<p>테이블 내에 입력한 데이터, 수정한 데이터, 삭제한 데이터에 대해 commit이전에는 변경사항을 취소할 수 있는데 Rollback기능으로 취소할 수 있다.</p>\n<ul>\n<li>Rollback은 데이터 변경 사항이 취소되어 데이터의 이전 상태로 복구되며, 관련된 행에 대한 locking이 풀리고 다른 사용자들이 데이터 변경을 할 수 있게 됨을 의미</li>\n</ul>\n<hr>\n<p>잘못된 정보는 댓글로 Feedback 부탁드립니다!\n<br><br><br><br><br></p>\n<hr>\n<p>ref.</p>\n<p><a href=\"https://velog.io/@gillog/DB-11-1N-NM-%EA%B4%80%EA%B3%84\">https://velog.io/@gillog/DB-11-1N-NM-%EA%B4%80%EA%B3%84</a></p>\n<p><a href=\"https://victorydntmd.tistory.com/129\">https://victorydntmd.tistory.com/129</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/ACID\">https://ko.wikipedia.org/wiki/ACID</a></p>\n<p><a href=\"https://hoon93.tistory.com/24\">https://hoon93.tistory.com/24</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#database%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Database를 사용하는 이유?</a></li>\n<li>\n<p><a href=\"#rdbms-relational-database-management-system\">RDBMS (Relational DataBase Management System)</a></p>\n<ul>\n<li>\n<p><a href=\"#rdbms%EC%97%90%EC%84%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EB%81%BC%EB%A6%AC%EC%9D%98-%EC%97%B0%EA%B2%B0-%EC%A2%85%EB%A5%98\">RDBMS에서 테이블끼리의 연결 종류</a></p>\n<ul>\n<li><a href=\"#1-one-to-one\">1) One to One</a></li>\n<li><a href=\"#2-one-to-many\">2) One to Many</a></li>\n<li><a href=\"#3-many-to-many\">3) Many to Many</a></li>\n</ul>\n</li>\n<li><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B3%BC-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">테이블과 테이블을 연결하는 방법</a></li>\n<li><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94%EB%93%A4%EC%9D%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">테이블들을 연결하는 이유?</a></li>\n<li><a href=\"#acidatomicity-consistency-isolation-durability\">ACID(Atomicity, Consistency, Isolation, Durability)</a></li>\n<li>\n<p><a href=\"#commit--rollback\">Commit &#x26; Rollback</a></p>\n<ul>\n<li><a href=\"#commit\">Commit</a></li>\n<li><a href=\"#rollback\">Rollback</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 21, 2021","title":"Database","categories":"Database","author":"이준영","emoji":"📡"},"fields":{"slug":"/about-database/"}},"site":{"siteMetadata":{"siteUrl":"http://pratiable.github.io","comments":{"utterances":{"repo":"Pratiable/Pratiable.github.io"}}}}},"pageContext":{"slug":"/boj-js-output-problem/","nextSlug":"/dependency-injection/","prevSlug":"/about-database/"}},"staticQueryHashes":["1073350324","2938748437"]}