{"componentChunkName":"component---src-templates-blog-template-js","path":"/dependency-injection/","result":{"data":{"cur":{"id":"84a84519-82e2-5a5d-ba5e-49240d7ca3a0","html":"<blockquote>\n<p>⛔️ 공부하며 정리한 내용으로 내용상 정확하지 않은 부분이 있을 수 있으니 참고 부탁드립니다!</p>\n<p>수정이 필요한 부분은 Comment 남겨주시면 감사하겠습니다!</p>\n</blockquote>\n<h1 id=\"이-글을-쓰는-목적\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EA%B8%80%EC%9D%84-%EC%93%B0%EB%8A%94-%EB%AA%A9%EC%A0%81\" aria-label=\"이 글을 쓰는 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 글을 쓰는 목적🤔</h1>\n<p><code class=\"language-text\">Nest.js</code>를 공부하다 보니 <code class=\"language-text\">Django</code>를 공부할 때와는 달리 처음보는 개념들이 너무 많았는데 그 중에서 Dependency Injection은 가장 자주나오고 앞으로 무슨 언어 &#x26; 프레임워크로 개발을 진행하던지 상관없이 알아야 할 필수 개념, OOP을 위한 부분 같아서 글로써 정리해보고자 한다!</p>\n<hr>\n<h1 id=\"dependency-injection의존성-주입이란\" style=\"position:relative;\"><a href=\"#dependency-injection%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4%EB%9E%80\" aria-label=\"dependency injection의존성 주입이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection(의존성 주입)이란?</h1>\n<p>간단하게 설명하자면 class간의 의존성을 class 외부에서 주입하는것을 말하는데 아래에 하나씩 적어보며 이해해 보기로 하자!</p>\n<hr>\n<h2 id=\"의존성\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"의존성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성?</h2>\n<p>일단 의존성이란 객체들이 서로 의존 관계를 가진 성질이라고 간단하게 정리 할 수 있다!</p>\n<p>객체가 두 개가 존재할 때 한 객체가 존재하려면 다른 하나를 필요로 할 때 의존성이 생긴다고 할 수 있는데, 일단\n이해가 잘 안되니 아래 코드로 일단 살펴보도록 하겠다!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dagger</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'attacked with a Dagger!'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rogue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> weapon<span class=\"token operator\">:</span> Dagger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 Rogue class는 Dagger class를 내부에서 새로 생성하게 되면서 의존관계가 생기게 되며, weapon을 변경하고 싶어도 다른 weapon으로 변경할 수 없게 되는 문제가 있다!</p>\n<p>이런 경우에 <code class=\"language-text\">Tight Coupling(강한 결합)</code>이 일어나게 되는데 이런 경우에 Dagger class를 변경하게 된다면 당연하게도 Rouge class까지 영향을 미치게 된다.</p>\n<p>결국 하나의 객체가 수정되었을 때 그 객체를 의존하고 있는 다른 객체까지 수정되어야 하는 문제가 발생하고 Unit Test 작성도 어려워진다.</p>\n<hr>\n<h2 id=\"주입은\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9E%85%EC%9D%80\" aria-label=\"주입은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주입은?</h2>\n<p>위에 코드에서는 객체 내부에서 또 다른 객체를 생성해서 사용했는데 외부에서 객체를 생성해서 다른 객체에게 넣어주는 것을 뜻한다.</p>\n<p>주입하는 방법은</p>\n<ol>\n<li>Field Injection</li>\n<li>Function(Setter) Injection</li>\n<li>Constructor Injection</li>\n</ol>\n<p>세 가지가 있는데 위 세 가지 방법중에 Constructor를 통해서 주입하는 방법으로 진행해 보도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dagger</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'attacked with a Dagger!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bow</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Weapon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'attacked with a Bow!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rogue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> weapon<span class=\"token operator\">:</span> Weapon<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>weapon<span class=\"token operator\">:</span> Weapon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> weapon<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rangedRogue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rogue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bow</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> meleeRogue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rogue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dagger</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rangedRogue<span class=\"token punctuation\">.</span><span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>meleeRogue<span class=\"token punctuation\">.</span><span class=\"token function\">attackMonster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// \"attacked with a Bow!\"</span>\n<span class=\"token comment\">// \"attacked with a Dagger!\" </span></code></pre></div>\n<p>위 코드를 보면 Rogue객체는 의존하는 type만 알고있고, 매개변수로 정해진 type(예제에서는 Weapon)을 전달하게 되면 어느것이 들어오던지 문제 없이 객체를 생성할 수 있게 된다. 이렇게 코드를 작성하면 의존성이 해소될 수 있다.</p>\n<p>하지만 여기서 의존성이 해소되었다고 끝이 아니라 알아야될 한 가지의 개념이 더 존재한다.</p>\n<hr>\n<h2 id=\"inversion-of-control제어의-역전\" style=\"position:relative;\"><a href=\"#inversion-of-control%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\" aria-label=\"inversion of control제어의 역전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inversion of Control(제어의 역전)</h2>\n<p>IoC는 객체의 생성이나 Lifecycle의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미하는 Design pattern이다.</p>\n<p>이것을 구현하기 위해서는 IoC Container가 필요한데 이 역할을 Framework가 해줄 수 있다.</p>\n<p>결국 Framework에서 클라이언트 코드에 객체를 주입해서 개발자가 신경써야 할 코드를 줄이는 방법이다.</p>\n<blockquote>\n<p>IoC Container는 Factory Pattern과 혼동해서 사용할 수 있다고 한다.</p>\n<p>기본적으로 Factory는 단순히 객체를 생성하게 되지만 IoC Container를 사용 시 IoC의 개념이 적용되어야 한다.</p>\n<p>IoC Container를 사용한다고 해서 그냥 IoC가 일어나는 것이 아니라는 뜻.</p>\n</blockquote>\n<p>Nest.js의 예제를 하나 확인해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountsService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">InjectRepository</span></span><span class=\"token punctuation\">(</span>Account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> accountRepository<span class=\"token operator\">:</span> Repository<span class=\"token operator\">&lt;</span>Account<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">findAccount</span><span class=\"token punctuation\">(</span>user_account<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Account <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>user_account<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnauthorizedException</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INVALID_ACCOUNT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 AccountsService의 생성자에 accountRepository 부분을 보게되면 type만 지정해 줬는데도 아래 findAccount부분에서 accountRepository의 findOne이라는 method를 사용하고 있다.</p>\n<p>이것이 가능한 이유는 Nest.js에서 accountRepository의 type을 보고 Repository 타입을 알아서 할당해줬기 때문이다.</p>\n<p>그래서 개발자는 위 객체의 Lifecycle을 신경쓰지 않아도 편하게 사용하면 되는데 이렇게 생성된 객체는 Nest.js에서 자동으로 관리를 해주기 때문이다.</p>\n<hr>\n<h2 id=\"dependency-injection의-장단점\" style=\"position:relative;\"><a href=\"#dependency-injection%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"dependency injection의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection의 장단점</h2>\n<p>지금까지 Dependency Injection에 대해서 여러 예제와 함께 살펴 봤는데 Dependency Injection의 장단점에 대해 짧게 정리해보려고 한다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>가독성과 코드의 재사용성을 높여줌</li>\n<li>종속성이 감소하기 때문에 변경에 민감하지 않게 됨</li>\n<li>객체간의 결합도를 낮춰주기 때문에 유연한 코드작성이 가능해짐</li>\n<li>객체들이 분리되어 있어서 Test Case작성 시 효율적임</li>\n<li>Lifecycle별로 Container를 관리해서 리소스의 낭비를 줄일 수 있음</li>\n</ol>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>DI를 위해서 따로 작업을 해주어야 하기 때문에 간단한 코드를 작성할 땐 번거로울 수 있음</li>\n<li>동작, 구성을 분리하기 때문에 코드 추적이 어려울 수 있음</li>\n</ol>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며🎉</h2>\n<p>DI를 처음 접할 땐 모르는 부분이 많았기 때문에 프로젝트를 진행하며 이게 어떻게 동작하는지 생각할 시간이 너무 없고 작동이 되는 코드만 작성하기에 급급했던 것 같은데\n그래도 이번 블로그 글을 정리하면서 DI에 대해 많이 배운 것 같다.</p>\n<p>Framework에서 DI를 해준다고 해서 너무 Framework에 의존하지 않고 어떻게 하면 내 코드에서부터 의존성을 줄여 나갈 수 있을까 고민해봐야겠다.</p>\n<p>하지만 문제는 이렇게 공부하고 나니 또 모르는 개념들이 쏟아져서 앞으로도 많은 학습이 필요할 것 같은데 그런 부분들도 추가로 블로그 글로 정리해야 할 듯 하다😂</p>\n<blockquote>\n<p>🛠 <em>부족한 부분들은 지속적으로 수정 예정!</em></p>\n</blockquote>\n<hr>\n<p>앞으로 공부해야 할 것들🤙🏻</p>\n<ul>\n<li>Singleton Pattern</li>\n<li>Factory Pattern</li>\n<li>etc…</li>\n</ul>\n<hr>\n<p><strong>References</strong></p>\n<p><a href=\"https://medium.com/lemonade-engineering/node-js%EB%A1%9C-%EC%84%A4%EB%AA%85%ED%95%98%EB%8A%94-di-b4a8acf9ce25\">출처1</a></p>\n<p><a href=\"https://medium.com/@jang.wangsu/di-dependency-injection-%EC%9D%B4%EB%9E%80-1b12fdefec4f\">출처2</a></p>\n<p><a href=\"https://develogs.tistory.com/19\">출처3</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1\">의존성?</a></li>\n<li><a href=\"#%EC%A3%BC%EC%9E%85%EC%9D%80\">주입은?</a></li>\n<li><a href=\"#inversion-of-control%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\">Inversion of Control(제어의 역전)</a></li>\n<li>\n<p><a href=\"#dependency-injection%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">Dependency Injection의 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며🎉</a></li>\n</ul>\n</div>","excerpt":"⛔️ 공부하며 정리한 내용으로 내용상 정확하지 않은 부분이 있을 수 있으니 참고 부탁드립니다! 수정이 필요한 부분은 Comment 남겨주시면 감사하겠습니다! 이 글을 쓰는 목적🤔 를 공부하다 보니 를 공부할 때와는 달리 처음보는 개념들이 너무 많았는데 그 중에서 Dependency Injection은 가장 자주나오고 앞으로 무슨 언어 & 프레임워크로 개발을 진행하던지 상관없이 알아야 할 필수 개념, OOP을 위한 부분 같아서 글로써 정리해보고자 한다! Dependency Injection(의존성 주입)이란? 간단하게 설명하자면 class간의 의존성을 class 외부에서 주입하는것을 말하는데 아래에 하나씩 적어보며 이해해 보기로 하자! 의존성? 일단 의존성이란 객체들이 서로 의존 관계를 가진 성질이라고 간단하게 정리 할 수 있다! 객체가 두 개가 존재할 때 한 객체가 존재하려면 다른 하나를 필요로 할 때 의존성이 생긴다고 할 수 있는데, 일단\n이해가 잘 안되니 아래 코드로 일단 살펴보…","frontmatter":{"date":"August 29, 2021","title":"Dependency Injection","categories":"디자인패턴","author":"이준영","emoji":"💉"},"fields":{"slug":"/dependency-injection/"}},"next":{"id":"32067f2c-990a-5b26-b9ec-7102480c0ebd","html":"<p>Velog에서 Github Blog로 이전!</p>\n<p>열심히 하자!</p>","frontmatter":{"date":"August 17, 2021","title":"Github blog로 이전했습니다!","categories":"잡담","author":"이준영","emoji":"🧢"},"fields":{"slug":"/blog-test/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"http://pratiable.github.io","comments":{"utterances":{"repo":"Pratiable/Pratiable.github.io"}}}}},"pageContext":{"slug":"/dependency-injection/","nextSlug":"/blog-test/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}